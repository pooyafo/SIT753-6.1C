pipeline {
    agent any
    environment {
        Email_Address = 'pooyafo@gmail.com'
    }
    triggers {
        pollSCM('H/2 * * * *') // run every 2 minutes
    }

    stages {
        stage('Build') {
            steps {
                    echo "Stage 1: Build - In this stage, the code is compiled and assembled into a deployable package, preparing it for the next stages of testing and deployment. Tool used: Maven, which streamlines the build process by managing dependencies and automating the project lifecycle"
                }
        }
        
        stage('Unit and Integration Tests') {
            steps {
                echo 'Stage 2: Unit and Integration Tests - In this stage, unit tests ensure the code performs its expected functions, while integration tests verify that different application components work cohesively. Tools used: JUnit for unit testing and Selenium for integration testing.'
            }
            post {
                always {
                    script {
                        writeFile file: 'log.txt', text: currentBuild.rawBuild.getLog(100).join('\n')
                    }
                    emailext (
                        to: "${env.Email_Address}",
                        subject: "Unit and Integration Tests - ${currentBuild.currentResult}",
                        body: "Please find the attached log file for the Stage 2: Unit and Integration Tests.",
                        attachmentsPattern: 'log.txt'
                    )
                }
            }
        }
        
        stage('Code Analysis') {
            steps {
                echo 'Stage 3: Code Analysis - In this stage, the code is analyzed for quality, maintainability, and adherence to industry standards. Tool used: SonarQube, integrated with Jenkins, provides comprehensive code analysis and highlights areas for improvement.'
            }
        }

        stage('Security Scan') {
            steps {
                echo 'Stage 4: Security Scan - In this stage, a security scan identifies potential vulnerabilities in the code. Tool used: OWASP Dependency-Check, integrated with Jenkins, detects security flaws and outdated dependencies.'
            }
            post {
                always {
                    script {
                        writeFile file: 'log.txt', text: currentBuild.rawBuild.getLog(100).join('\n')
                    }
                    emailext (
                        to: "${env.Email_Address}",
                        subject: "Security Scan - ${currentBuild.currentResult}",
                        body: "Please find the attached log file for the Stage 4: Security Scan",
                        attachmentsPattern: 'log.txt'
                    )
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                echo 'Stage 5: Deploy to Staging - In this stage, the application is deployed to a staging environment that mirrors the production environment. Tool used: AWS CodeDeploy for seamless deployment to an AWS EC2 instance.'
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                echo 'Stage 6: Integration Tests on Staging - In this stage, integration tests are conducted in the staging environment to ensure the application behaves as expected in a near-production setting. Tools used: Postman and JMeter for API and performance testing.'
            }
        }

        stage('Deploy to Production') {
            steps {
                echo 'Stage 7: Deploy to Production - In this stage, the application is deployed to the production environment. Tool used: AWS CodeDeploy for reliable deployment to production servers on AWS EC2 instances.'
            }
        }
    }
}
